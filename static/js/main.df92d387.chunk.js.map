{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","Step","Steps","App","state","_getBusLoc","_callee","buses","regenerator_default","a","wrap","_context","prev","next","_this","_callApi","sent","console","log","setState","stop","fetch","then","response","json","bus_array","catch","err","_renderBusData","map","bus_arr","react_default","createElement","style","background","padding","card","title","bus_number","bordered","width","row","col","span","push","name","is_operating","lat","lng","steps","progressDot","direction","current","showMenu","visible","onClose","this","bus","layout","es_button","type","onClick","drawer","placement","closable","icon","spin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df92d387.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Card, Layout, Drawer, Button, Icon, Steps, Row, Col} from 'antd';\nimport './App.css';\nconst {Header, Footer, Content} = Layout;\nconst {Step} = Steps;\n\nclass App extends Component {\n\n  state = {\n  }\n\n  componentDidMount() {\n    console.log(\"DId Mount\")\n    this._getBusLoc()\n  }\n\n  _getBusLoc = async () => {\n    const buses = await this._callApi()\n    console.log(buses)\n    this.setState({\n      buses\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"/getBusLoc\")\n      .then((response) => response.json())\n      .then(json => json.bus_array)\n      .catch((err) => console.log(err))\n  }\n  //API 접근\n\n  _renderBusData = () => {\n    console.log(this.state)\n    const bus = this.state.buses.map((bus_arr) => {\n      console.log(bus_arr)\n      return (\n        <div style={{ background: '#ECECEC', padding: '30px'}}>\n          <Card title={bus_arr.bus_number} bordered={false} style={{ width: 700 }}>\n            <Row>\n              <Col span={6} push={1}>\n              <p>{bus_arr.name} </p>\n              <p>{bus_arr.is_operating}</p>\n              <p>{bus_arr.lat}</p>\n              <p>{bus_arr.lng}</p>\n              </Col>\n              <Col span={4} push={4}>\n                <Steps progressDot direction=\"vertical\" current={1}>\n                  <Step title=\"외대사거리\" />\n                  <Step title=\"모현지석묘\" />\n                  <Step title=\"외대기숙사\"/>\n                  <Step title=\"외대도서관\"/>\n                  <Step title=\"학생회관\"/>\n                </Steps>\n              </Col>\n            </Row>\n           \n          </Card>\n        </div>        \n        \n        )\n    })\n\n    return bus\n  }\n\n  showMenu = () => {\n    this.setState({\n      visible: true\n    });\n  }\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    const bus = this.state.buses\n\n    return (\n        <Layout>\n          <Header>\n            <Button type=\"primary\" onClick={this.showMenu}>더보기</Button>\n          </Header>\n          <Drawer title = \"더보기\" placement=\"left\" closable = {false}\n            onClose = {this.onClose}\n            visible = {this.state.visible}>\n              <p>셔틀1</p>\n              <p>셔틀2</p>\n              <p>셔틀3</p>\n          </Drawer>\n          <Content>\n          {bus ? this._renderBusData() : <Icon type=\"sync\" spin/>}\n          </Content>\n          <Footer>\n            Footer\n          </Footer>\n        </Layout>\n          )\n  }\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}